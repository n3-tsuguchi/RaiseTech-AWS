- name: Update dnf cache
  become: yes
  ansible.builtin.dnf:
    update_cache: yes
  when: ansible_os_family == "RedHat"

- name: Download MySQL Community repository RPM
  become: yes
  ansible.builtin.get_url:
    url: https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
    dest: /tmp/mysql80-community-release-el9-1.noarch.rpm
    mode: '0644'
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"

- name: Install MySQL Community repository from local RPM
  become: yes
  ansible.builtin.command: rpm -Uvh /tmp/mysql80-community-release-el9-1.noarch.rpm
  args:
    creates: /etc/yum.repos.d/mysql-community.repo
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"

- name: Install MySQL Community Server and dependencies
  become: yes
  ansible.builtin.dnf:
    name:
      - mysql-community-server
      - python3-PyMySQL
    state: present
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"

- name: Start and enable mysqld service
  become: yes
  ansible.builtin.systemd:
    name: mysqld
    state: started
    enabled: yes

- name: Get the initial root password
  become: yes
  ansible.builtin.shell: "grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}'"
  register: initial_root_password
  changed_when: false
  until: initial_root_password.stdout != ""
  retries: 5
  delay: 2
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2023"

- name: Set new root password
  become: yes
  ansible.builtin.mysql_user:
    name: root
    host: localhost
    password: "{{ mysql_root_password }}"
    login_user: root
    login_password: "{{ initial_root_password.stdout }}"
    check_implicit_admin: true
  no_log: true
  when: initial_root_password.stdout != ""

- name: Remove anonymous MySQL users
  become: yes
  ansible.builtin.mysql_user:
    name: ""
    host_all: yes
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  no_log: true

- name: Remove the test database
  become: yes
  ansible.builtin.mysql_db:
    name: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  no_log: true

- name: Create application database
  become: yes
  ansible.builtin.mysql_db:
    name: "{{ mysql_database }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  when: mysql_database is defined

- name: Create application user
  become: yes
  ansible.builtin.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_user_password }}"
    priv: "{{ mysql_database }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  no_log: true
  when: mysql_user is defined and mysql_user_password is defined

- name: Copy custom MySQL configuration file
  become: yes
  ansible.builtin.template:
    src: my.cnf.j2
    dest: /etc/my.cnf.d/custom.cnf
    owner: root
    group: root
    mode: '0644'
  notify: restart mysql
